// Copyright 2019 Smart-Edge.com, Inc. All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package openness.auth;
option go_package = "github.com/smartedgemec/schema;auth";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "Auth API";
        version: "1.0.0";
        contact: {
            name: "Smart Edge";
            url: "github.com/smartedgemec/auth";
            email: "support@smart-edge.com";
        };
        license: {
            name: "Apache 2.0 License";
            url: "https://github.com/smartedgemec/schema/blob/master/LICENSE";
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
        key: "401";
        value: {
            description: "Unauthorized";
        }
    }
};

// The AuthService defines endpoints for requesting credentials, which may be
// used for authentication against other endpoints.
// 
// This should be used for any services that require authentication as a means
// for unauthenticated parties to gain credentialed access.
service AuthService {
    rpc RequestCredentials (Identity) returns (Credentials) {
        option (google.api.http) = {
            post: "/auth"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Request authentication credentials";
            responses: {
                key: "201";
                value: {
                    description: "Authentication credentials created";
                }
            }
            responses: {
                key: "404";
                value: {
                    description: "Requested identity not known/found";
                }
            }
        };
    }
}

// Identity defines a request to obtain authentication credentials. These
// credentials would be used to further communicate with endpoint(s) that are
// protected by a form of authentication.
//
// Any strings that are annotated as "PEM-encoded" implies that encoding format
// is used, with any newlines indicated with `\n` characters. Most languages
// provide encoders that correctly marshal this out. For more information,
// see the RFC here: https://tools.ietf.org/html/rfc7468 
message Identity {
    // A PEM-encoded certificate signing request (CSR)
    string csr = 1;
}

// Credentials defines a response for a request to obtain authentication
// credentials. These credentials may be used to further communicate with
// endpoint(s) that are protected by a form of authentication.
//
// Any strings that are annotated as "PEM-encoded" implies that encoding format
// is used, with any newlines indicated with `\n` characters. Most languages
// provide encoders that correctly marshal this out. For more information,
// see the RFC here: https://tools.ietf.org/html/rfc7468 
message Credentials {
    // An identifier for the set of credentials
    string id = 1;
    // A PEM-encoded signed certificate for the CSR
    string certificate = 2;
    // A PEM-encoded certificate chain, starting with the issuing CA and
    // ending with the root CA (inclusive)
    repeated string ca_chain = 3;
    // A PEM-encoded CAs to be added to the client's CA pool
    repeated string ca_pool = 4;
}
