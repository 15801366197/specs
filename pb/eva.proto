// Copyright 2019 Smart-Edge.com, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package openness.eva;
option go_package = "github.com/smartedgemec/eva";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "Application Virtualization API";
        version: "1.0.0";
        contact: {
            name: "Smart Edge";
            url: "github.com/smartedgemec/eva";
            email: "support@smart-edge.com";
        };
        license: {
            name: "Apache 2.0 License";
            url: "https://github.com/smartedgemec/schema/blob/master/LICENSE";
        };
    };
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
    responses: {
        key: "401";
        value: {
            description: "Unauthorized";
        }
    }
};

// The Controller Virtualization Agent has endpoints for requesting information
// on virtualized (VM/container) application state managed by an external
// orchestrator.
service ControllerVirtualizationAgent {
    // GetContainerByIP queries an external orchestrator (e.g. Kubernetes) for
    // an application running (not stopped) on the Node making the request with
    // a given (active) Pod IP address. The identity of the Node making the
    // request is determined by the TLS certificate it presents at transport
    // authentication time.
    rpc GetContainerByIP (ContainerIP) returns (ContainerInfo) {
        option (google.api.http) = {
            get: "/container"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Request info on a container managed by an external orchestrator like Kubernetes";
            responses: {
                key: "404";
                value: {
                    description: "No running container has such IP address on the Node making the request";
                }
            }
        };
    }
}

message ContainerIP {
    string ip = 1;
}

// ContainerInfo represents the state of a running application.
message ContainerInfo {
    string id = 1; // the deployment ID of the application
}
