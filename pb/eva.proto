// Copyright 2019 Smart-Edge.com, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package openness.eva;
option go_package = "github.com/smartedgemec/eva";

import "google/protobuf/empty.proto";
import "ela.proto";

// The services below are for calls from the controller to an edge node and so
// do not include the /devices/{id} prefix in the URL since the edge node is
// already known.

// ApplicationDeploymentService manages application deployments for an appliance.
service ApplicationDeploymentService {
    rpc DeployContainer (openness.ela.Application) returns (google.protobuf.Empty) {}
    rpc DeployVM (openness.ela.Application) returns (google.protobuf.Empty) {}
    rpc Redeploy (openness.ela.Application) returns (google.protobuf.Empty) {}
    rpc Undeploy (ApplicationID) returns (google.protobuf.Empty) {}
}

// ApplicationLifecycleService manages application lifecycles for an appliance.
service ApplicationLifecycleService {
    rpc Start (LifecycleCommand) returns (google.protobuf.Empty) {}
    rpc Stop (LifecycleCommand) returns (google.protobuf.Empty) {}
    rpc Restart (LifecycleCommand) returns (google.protobuf.Empty) {}
    rpc GetStatus (ApplicationID) returns (openness.ela.LifecycleStatus) {}
}

// VNFDeploymentService manages VNF (Virtual Network Function) deployments
// for an appliance.
service VNFDeploymentService {
    rpc Deploy (openness.ela.VNF) returns (google.protobuf.Empty) {}
    rpc GetStatus (VNFID) returns (openness.ela.LifecycleStatus) {}
    rpc Redeploy (openness.ela.VNF) returns (google.protobuf.Empty) {}
    rpc Undeploy (VNFID) returns (google.protobuf.Empty) {}
}

// VNFLifecycleService manages VNF (Virtual Network Function) lifecycles
// for an appliance.
service VNFLifecycleService {
    rpc Start (LifecycleCommand) returns (google.protobuf.Empty) {}
    rpc Stop (LifecycleCommand) returns (google.protobuf.Empty) {}
    rpc Restart (LifecycleCommand) returns (google.protobuf.Empty) {}
}

message ApplicationID {
    string id = 1;
}

message VNFID {
    string id = 1;
}

message LifecycleCommand {
    string id = 1;
    enum Command {
        START = 0;
        STOP = 1;
        RESTART = 2;
    }
    Command cmd = 2;
}

// The services below are for calls from an edge node to the controller.

// The Controller Virtualization Agent has endpoints for requesting information
// on virtualized (VM/container) application state managed by an external
// orchestrator.
service ControllerVirtualizationAgent {
    // GetContainerByIP queries an external orchestrator (e.g. Kubernetes) for
    // an application running (not stopped) on the Node making the request with
    // a given (active) Pod IP address. The identity of the Node making the
    // request is determined by the TLS certificate it presents at transport
    // authentication time.
    rpc GetContainerByIP (ContainerIP) returns (ContainerInfo) {
    }
}

message ContainerIP {
    string ip = 1;
}

// ContainerInfo represents the state of a running application.
message ContainerInfo {
    string id = 1; // the deployment ID of the application
}
