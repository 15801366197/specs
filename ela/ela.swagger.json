{
  "swagger": "2.0",
  "info": {
    "title": "ELA Interface",
    "version": "1.0",
    "contact": {
      "name": "Smart Edge",
      "url": "code.smart-edge.com/ela",
      "email": "support@smart-edge.com"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "https://github.com/smartedgemec/blob/master/LICENSE"
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/applications": {
      "get": {
        "description": "Retrieve all deployed applications",
        "operationId": "GetAll",
        "responses": {
          "200": {
            "description": "Application list",
            "schema": {}
          }
        },
        "tags": [
          "ApplicationDeploymentService"
        ]
      },
      "post": {
        "description": "Deploy a VM application",
        "operationId": "DeployVM",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/elaApplicationID"
            }
          },
          "202": {
            "description": "VM application deployment commenced",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/elaApplication"
            }
          }
        ],
        "tags": [
          "ApplicationDeploymentService"
        ]
      }
    },
    "/applications/{id}": {
      "get": {
        "description": "Retrieve an application policy.",
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "Application policy",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ApplicationPolicyService"
        ]
      },
      "delete": {
        "description": "Remove a deployed application",
        "operationId": "Remove",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "204": {
            "description": "Application removed",
            "schema": {}
          },
          "404": {
            "description": "Application not found",
            "schema": {}
          },
          "409": {
            "description": "Application running, must be stopped before removal",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ApplicationDeploymentService"
        ]
      },
      "patch": {
        "description": "Create/update an application policy.",
        "operationId": "Set",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "204": {
            "description": "Application policy set",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/elaTrafficPolicy"
            }
          }
        ],
        "tags": [
          "ApplicationPolicyService"
        ]
      }
    },
    "/interfaces": {
      "get": {
        "description": "Retrieve all interface configurations",
        "operationId": "GetAll",
        "responses": {
          "200": {
            "description": "Interface configurations",
            "schema": {}
          }
        },
        "tags": [
          "InterfaceService"
        ]
      },
      "patch": {
        "description": "Update multiple interface configurations",
        "operationId": "BulkUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "204": {
            "description": "Interface configurations updated",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/elaNetworkInterfaces"
            }
          }
        ],
        "tags": [
          "InterfaceService"
        ]
      }
    },
    "/interfaces/{id}": {
      "get": {
        "description": "Retrieve an interface policy.",
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "Interface policy",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "InterfacePolicyService"
        ]
      },
      "patch": {
        "description": "Create/update an interface policy.",
        "operationId": "Set",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "204": {
            "description": "Interface policy set",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/elaTrafficPolicy"
            }
          }
        ],
        "tags": [
          "InterfacePolicyService"
        ]
      }
    },
    "/vnfs": {
      "get": {
        "description": "Retrieve all deployed VNFs",
        "operationId": "GetAll",
        "responses": {
          "200": {
            "description": "VNF list",
            "schema": {}
          }
        },
        "tags": [
          "VNFDeploymentService"
        ]
      },
      "post": {
        "description": "Deploy a VNF",
        "operationId": "Deploy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/elaVNFID"
            }
          },
          "202": {
            "description": "VNF deployment commenced",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/elaVNF"
            }
          }
        ],
        "tags": [
          "VNFDeploymentService"
        ]
      }
    },
    "/vnfs/{id}": {
      "get": {
        "description": "Retrieve a deployed VNF",
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "VNF",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "VNFDeploymentService"
        ]
      },
      "delete": {
        "description": "Remove a deployed VNF",
        "operationId": "Remove",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "204": {
            "description": "VNF removed",
            "schema": {}
          },
          "404": {
            "description": "VNF not found",
            "schema": {}
          },
          "409": {
            "description": "VNF running, must be stopped before removal",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "VNFDeploymentService"
        ]
      },
      "patch": {
        "description": "Restart a deployed VNF",
        "operationId": "Restart",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "202": {
            "description": "VNF restart commenced",
            "schema": {}
          },
          "204": {
            "description": "VNF already restarted or restarting",
            "schema": {}
          },
          "404": {
            "description": "VNF not found",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LifecycleCommandCommand"
            }
          }
        ],
        "tags": [
          "VNFLifecycleService"
        ]
      }
    },
    "/zones": {
      "get": {
        "description": "Retrieve all zone configurations",
        "operationId": "GetAll",
        "responses": {
          "200": {
            "description": "Zone configurations",
            "schema": {}
          }
        },
        "tags": [
          "ZoneService"
        ]
      },
      "post": {
        "description": "Create a zone configuration",
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "Zone configuration created",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/elaNetworkZone"
            }
          }
        ],
        "tags": [
          "ZoneService"
        ]
      },
      "patch": {
        "description": "Update multiple zone configurations",
        "operationId": "BulkUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "204": {
            "description": "Zones updated",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/elaNetworkZones"
            }
          }
        ],
        "tags": [
          "ZoneService"
        ]
      }
    },
    "/zones/{id}": {
      "get": {
        "description": "Retrieve a zone configuration",
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "Zone configuration",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ZoneService"
        ]
      },
      "delete": {
        "description": "Delete a zone configuration",
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "204": {
            "description": "Zone configuration deleted",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ZoneService"
        ]
      },
      "patch": {
        "description": "Update a zone configuration",
        "operationId": "Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "204": {
            "description": "Zone configuration updated",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/elaNetworkZone"
            }
          }
        ],
        "tags": [
          "ZoneService"
        ]
      }
    }
  },
  "definitions": {
    "LifecycleCommandCommand": {
      "type": "string",
      "enum": [
        "START",
        "STOP",
        "RESTART"
      ],
      "default": "START"
    },
    "NetworkInterfaceInterfaceDriver": {
      "type": "string",
      "enum": [
        "KERNEL",
        "USERSPACE"
      ],
      "default": "KERNEL"
    },
    "NetworkInterfaceInterfaceType": {
      "type": "string",
      "enum": [
        "NONE",
        "UPSTREAM",
        "DOWNSTREAM",
        "BIDIRECTIONAL",
        "BREAKOUT"
      ],
      "default": "NONE"
    },
    "TrafficTargetTargetAction": {
      "type": "string",
      "enum": [
        "ACCEPT",
        "REJECT",
        "DROP"
      ],
      "default": "ACCEPT"
    },
    "elaApplication": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "cores": {
          "type": "integer",
          "format": "int32"
        },
        "memory": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "$ref": "#/definitions/elaLifecycleStatus"
        }
      },
      "title": "Application message - contains information about the application\nwe're about to deploy (or one already deployed).\nimage string is used to build the url to download the image from over http\nurl is the following: http://${controller_name}/app_images/${image}\n- so the last part is our image string - which is basically a file name\nwith a possible additional path prefixed"
    },
    "elaApplicationID": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "elaApplications": {
      "type": "object",
      "properties": {
        "applications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/elaApplication"
          }
        }
      }
    },
    "elaGTPFilter": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "mask": {
          "type": "integer",
          "format": "int64"
        },
        "imsis": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "GTPFilter specifies properties related to GTP filters. Some implementations\nmay not support multiple addresses or multiple IMSIs."
    },
    "elaIPFilter": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "mask": {
          "type": "integer",
          "format": "int64"
        },
        "begin_port": {
          "type": "integer",
          "format": "int64"
        },
        "end_port": {
          "type": "integer",
          "format": "int64"
        },
        "protocol": {
          "type": "string"
        }
      },
      "description": "IPFilter specifies properties related to IP filters. Some implementations\nmay not support multiple IP address (subnets) or have IPv6 support.\n\nIf a caller wishes to define a single port, begin_port and end_port should\nbe the same. For example, if the port is 3306, begin_port is 3306 and\nend_port is 3306. It is invalid to provide a begin_port that is greater than\nthe end_port.\n\nLeaving the address and mask fields empty implies that all possible IP \naddresses are in the filter. Leaving these primitive datatypes empty\ndefaults to the type's zero-value (as is the norm in protobuf). The\nfollowing describes the behavior depending on how the fields are populated:\n ___________________________________________________________________________\n|      Address      |      Mask      |               Result                |\n|   Zero-value (\"\") | Zero-value (0) |  All IPv4 (and IPv6, if supported)  |\n|    \"0.0.0.0\"      | Zero-value (0) |  All IPv4 only                      |\n|       \"::\"        | Zero-value (0) |  All IPv6 only (if supported)       |\n|    \"1.2.3.4\"      | Zero-value (0) |  Invalid                            |\n|   Zero-value (\"\") |       24       |  Invalid                            |\n ___________________________________________________________________________"
    },
    "elaIPModifier": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "IPModifier defines the IP properties that should be modified"
    },
    "elaLifecycleStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "READY",
        "STARTING",
        "RUNNING",
        "STOPPING",
        "STOPPED",
        "ERROR"
      ],
      "default": "UNKNOWN"
    },
    "elaMACFilter": {
      "type": "object",
      "properties": {
        "mac_addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "MACFilter specifies properties related to MAC filters. Some implementations\nmay not support multiple MAC addresses."
    },
    "elaMACModifier": {
      "type": "object",
      "properties": {
        "mac_address": {
          "type": "string"
        }
      },
      "description": "MACModifier defines the MAC properties that should be modified."
    },
    "elaNetworkInterface": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "driver": {
          "$ref": "#/definitions/NetworkInterfaceInterfaceDriver"
        },
        "types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkInterfaceInterfaceType"
          }
        },
        "mac_address": {
          "type": "string"
        },
        "vlan": {
          "type": "integer",
          "format": "int64"
        },
        "zones": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fallback_interface": {
          "type": "string",
          "description": "(LEGACY) The fallback interface for this interface. This only exists for\nlegacy dataplane implementations. In future implementations, a traffic\npolicy should be used to yield the same results. Using this is not\nadvisable as it belongs in the traffic policy and exposes a fallback\nbehavior that can be seen as insecure."
        }
      },
      "description": "NetworkInterface defines a network interface available on the host. \nInterfaces are typically kernel interfaces by default, and can be changed if\nthe caller wishes to do so.\n\nThe interface's type assists the policy engine in determining what types of\ntraffic the interface can expect to be handling, and is mainly here for\nsupport of legacy implementations (which may require the field is updated in\norder to work properly).\n\nAn interface can belong to multiple zones, which can be useful for when\nthe amount of actual interfaces is limited."
    },
    "elaNetworkInterfaces": {
      "type": "object",
      "properties": {
        "network_interfaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/elaNetworkInterface"
          }
        }
      }
    },
    "elaNetworkZone": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "description": "NetworkZone defines a network zone. A zone is effectively a label that\nisolates network traffic within an appliance. It allows for further rules\nto be made surrounding the zone and interfaces that are assigned to it."
    },
    "elaNetworkZones": {
      "type": "object",
      "properties": {
        "network_zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/elaNetworkZone"
          }
        }
      }
    },
    "elaTrafficPolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "traffic_rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/elaTrafficRule"
          }
        }
      },
      "description": "A policy engine applies these rules, using the context of the identified\ncomponent in order to send traffic to a target. The policy engine acts as\na man-in-the-middle. It may modify the packets in order to facilitate the\ntraffic flow. Examples of a policy engine are DPDK, VPP or iptables\napplications.",
      "title": "TrafficPolicy is a policy that defines a set of traffic rules for the\nidentified component (i.e. an application, an interface, etc.)"
    },
    "elaTrafficRule": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int64"
        },
        "source": {
          "$ref": "#/definitions/elaTrafficSelector"
        },
        "destination": {
          "$ref": "#/definitions/elaTrafficSelector"
        },
        "target": {
          "$ref": "#/definitions/elaTrafficTarget"
        }
      },
      "description": "TrafficRule defines a single traffic rule. The traffic selectors are used in\norder to construct both a rule that must be matched as well as what action\nto take on the traffic if the rule is matched.\n\nSince this is generic, the receiver of this rule must validate if the \ninformation provided by the caller is sufficient enough to construct a\npolicy of a particular type.\n\nA single rule only allows one of each traffic selector to be specified.\nHowever, if a system supports advanced networking rules, a traffic rule can\nspecify a subnet mask or a range in order to create a more dynamic rule. \n\nFor example, a rule with a source selector of 10.20.30.0/24 could match all\nsource traffic in that subnet block."
    },
    "elaTrafficSelector": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "macs": {
          "$ref": "#/definitions/elaMACFilter"
        },
        "ip": {
          "$ref": "#/definitions/elaIPFilter"
        },
        "gtp": {
          "$ref": "#/definitions/elaGTPFilter"
        }
      },
      "description": "TrafficSelector defines the parameters for a traffic selector in a\nTrafficRule. If a filter is empty, the selector does not evaluate it. The\nreceiver can select traffic by using the filters as it is examining a packet\nor payload. They must filter using the OSI stack from layer 7 to layer 1. \nFor example, if a MAC and IP are provided, the selector must first evaluate\nthe IP (layer 3) before the MAC (layer 2).\n\nIf a TrafficSelector has only the MAC filter specified, the selector is \ncreated only for that filter. However, if the selector contains a GTP and IP\nfilter, the selector is created on both and the traffic must match both\nfilters."
    },
    "elaTrafficTarget": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/TrafficTargetTargetAction"
        },
        "mac": {
          "$ref": "#/definitions/elaMACModifier"
        },
        "ip": {
          "$ref": "#/definitions/elaIPModifier"
        }
      },
      "description": "TrafficTarget defines the parameters for a traffic target in a TrafficRule.\nThe action indicates what target action to perform. If a modify field is\nempty, the target does not perform that type of modification.\n\nFor example, if the target should modify the MAC address, then it should be\nprovided in the message. The modifiers are currently only applicable if the\ninterface is trying to modify the traffic, such as is the case with a\nbreakout interface."
    },
    "elaVNF": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "cores": {
          "type": "integer",
          "format": "int32"
        },
        "memory": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "$ref": "#/definitions/elaLifecycleStatus"
        }
      }
    },
    "elaVNFID": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "elaVNFs": {
      "type": "object",
      "properties": {
        "vnfs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/elaVNF"
          }
        }
      }
    },
    "elaZoneID": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    }
  }
}
